'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var core$1 = require('@angular/core');
var core = require('@ionic-native/core');
var rxjs = require('rxjs');
var operators = require('rxjs/operators');

exports.Connection = void 0;
(function (Connection) {
    Connection["UNKNOWN"] = "unknown";
    Connection["ETHERNET"] = "ethernet";
    Connection["WIFI"] = "wifi";
    Connection["CELL_2G"] = "2g";
    Connection["CELL_3G"] = "3g";
    Connection["CELL_4G"] = "4g";
    Connection["CELL"] = "cellular";
    Connection["NONE"] = "none";
})(exports.Connection || (exports.Connection = {}));
var ɵngcc0 = require('@angular/core');
var Network = /** @class */ (function (_super) {
    tslib.__extends(Network, _super);
    function Network() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Constants for possible connection types
         */
        _this.Connection = {
            UNKNOWN: 'unknown',
            ETHERNET: 'ethernet',
            WIFI: 'wifi',
            CELL_2G: '2g',
            CELL_3G: '3g',
            CELL_4G: '4g',
            CELL: 'cellular',
            NONE: 'none',
        };
        return _this;
    }
    Network.prototype.onChange = function () {
        var _this = this;
        return (function () {
            if (core.checkAvailability(_this) === true) {
                return rxjs.merge(_this.onConnect().pipe(operators.mapTo('connected')), _this.onDisconnect().pipe(operators.mapTo('disconnected')));
            }
        })();
    };
    Network.prototype.onDisconnect = function () { return core.cordova(this, "onDisconnect", { "eventObservable": true, "event": "offline", "element": "document" }, arguments); };
    Network.prototype.onConnect = function () { return core.cordova(this, "onConnect", { "eventObservable": true, "event": "online", "element": "document" }, arguments); };
    Object.defineProperty(Network.prototype, "type", {
        get: function () { return core.cordovaPropertyGet(this, "type"); },
        set: function (value) { core.cordovaPropertySet(this, "type", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Network.prototype, "downlinkMax", {
        get: function () { return core.cordovaPropertyGet(this, "downlinkMax"); },
        set: function (value) { core.cordovaPropertySet(this, "downlinkMax", value); },
        enumerable: false,
        configurable: true
    });
    Network.pluginName = "Network";
    Network.plugin = "cordova-plugin-network-information";
    Network.pluginRef = "navigator.connection";
    Network.repo = "https://github.com/apache/cordova-plugin-network-information";
    Network.platforms = ["Amazon Fire OS", "Android", "Browser", "iOS", "Windows"];
Network.ɵfac = function Network_Factory(t) { return ɵNetwork_BaseFactory(t || Network); };
Network.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Network, factory: function (t) { return Network.ɵfac(t); } });
var ɵNetwork_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(Network);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Network, [{
        type: core$1.Injectable
    }], null, null); })();
    return Network;
}(core.IonicNativePlugin));

exports.Network = Network;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyJidW5kbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7MEJBR007QUFDTjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIHRzbGliID0gcmVxdWlyZSgndHNsaWInKTtcbnZhciBjb3JlJDEgPSByZXF1aXJlKCdAYW5ndWxhci9jb3JlJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJ0Bpb25pYy1uYXRpdmUvY29yZScpO1xudmFyIHJ4anMgPSByZXF1aXJlKCdyeGpzJyk7XG52YXIgb3BlcmF0b3JzID0gcmVxdWlyZSgncnhqcy9vcGVyYXRvcnMnKTtcblxuZXhwb3J0cy5Db25uZWN0aW9uID0gdm9pZCAwO1xuKGZ1bmN0aW9uIChDb25uZWN0aW9uKSB7XG4gICAgQ29ubmVjdGlvbltcIlVOS05PV05cIl0gPSBcInVua25vd25cIjtcbiAgICBDb25uZWN0aW9uW1wiRVRIRVJORVRcIl0gPSBcImV0aGVybmV0XCI7XG4gICAgQ29ubmVjdGlvbltcIldJRklcIl0gPSBcIndpZmlcIjtcbiAgICBDb25uZWN0aW9uW1wiQ0VMTF8yR1wiXSA9IFwiMmdcIjtcbiAgICBDb25uZWN0aW9uW1wiQ0VMTF8zR1wiXSA9IFwiM2dcIjtcbiAgICBDb25uZWN0aW9uW1wiQ0VMTF80R1wiXSA9IFwiNGdcIjtcbiAgICBDb25uZWN0aW9uW1wiQ0VMTFwiXSA9IFwiY2VsbHVsYXJcIjtcbiAgICBDb25uZWN0aW9uW1wiTk9ORVwiXSA9IFwibm9uZVwiO1xufSkoZXhwb3J0cy5Db25uZWN0aW9uIHx8IChleHBvcnRzLkNvbm5lY3Rpb24gPSB7fSkpO1xudmFyIE5ldHdvcmsgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWIuX19leHRlbmRzKE5ldHdvcmssIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTmV0d29yaygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdGFudHMgZm9yIHBvc3NpYmxlIGNvbm5lY3Rpb24gdHlwZXNcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLkNvbm5lY3Rpb24gPSB7XG4gICAgICAgICAgICBVTktOT1dOOiAndW5rbm93bicsXG4gICAgICAgICAgICBFVEhFUk5FVDogJ2V0aGVybmV0JyxcbiAgICAgICAgICAgIFdJRkk6ICd3aWZpJyxcbiAgICAgICAgICAgIENFTExfMkc6ICcyZycsXG4gICAgICAgICAgICBDRUxMXzNHOiAnM2cnLFxuICAgICAgICAgICAgQ0VMTF80RzogJzRnJyxcbiAgICAgICAgICAgIENFTEw6ICdjZWxsdWxhcicsXG4gICAgICAgICAgICBOT05FOiAnbm9uZScsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTmV0d29yay5wcm90b3R5cGUub25DaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGNvcmUuY2hlY2tBdmFpbGFiaWxpdHkoX3RoaXMpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJ4anMubWVyZ2UoX3RoaXMub25Db25uZWN0KCkucGlwZShvcGVyYXRvcnMubWFwVG8oJ2Nvbm5lY3RlZCcpKSwgX3RoaXMub25EaXNjb25uZWN0KCkucGlwZShvcGVyYXRvcnMubWFwVG8oJ2Rpc2Nvbm5lY3RlZCcpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG4gICAgfTtcbiAgICBOZXR3b3JrLnByb3RvdHlwZS5vbkRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3JlLmNvcmRvdmEodGhpcywgXCJvbkRpc2Nvbm5lY3RcIiwgeyBcImV2ZW50T2JzZXJ2YWJsZVwiOiB0cnVlLCBcImV2ZW50XCI6IFwib2ZmbGluZVwiLCBcImVsZW1lbnRcIjogXCJkb2N1bWVudFwiIH0sIGFyZ3VtZW50cyk7IH07XG4gICAgTmV0d29yay5wcm90b3R5cGUub25Db25uZWN0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29yZS5jb3Jkb3ZhKHRoaXMsIFwib25Db25uZWN0XCIsIHsgXCJldmVudE9ic2VydmFibGVcIjogdHJ1ZSwgXCJldmVudFwiOiBcIm9ubGluZVwiLCBcImVsZW1lbnRcIjogXCJkb2N1bWVudFwiIH0sIGFyZ3VtZW50cyk7IH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5ldHdvcmsucHJvdG90eXBlLCBcInR5cGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmUuY29yZG92YVByb3BlcnR5R2V0KHRoaXMsIFwidHlwZVwiKTsgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgY29yZS5jb3Jkb3ZhUHJvcGVydHlTZXQodGhpcywgXCJ0eXBlXCIsIHZhbHVlKTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZXR3b3JrLnByb3RvdHlwZSwgXCJkb3dubGlua01heFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29yZS5jb3Jkb3ZhUHJvcGVydHlHZXQodGhpcywgXCJkb3dubGlua01heFwiKTsgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgY29yZS5jb3Jkb3ZhUHJvcGVydHlTZXQodGhpcywgXCJkb3dubGlua01heFwiLCB2YWx1ZSk7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBOZXR3b3JrLnBsdWdpbk5hbWUgPSBcIk5ldHdvcmtcIjtcbiAgICBOZXR3b3JrLnBsdWdpbiA9IFwiY29yZG92YS1wbHVnaW4tbmV0d29yay1pbmZvcm1hdGlvblwiO1xuICAgIE5ldHdvcmsucGx1Z2luUmVmID0gXCJuYXZpZ2F0b3IuY29ubmVjdGlvblwiO1xuICAgIE5ldHdvcmsucmVwbyA9IFwiaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1uZXR3b3JrLWluZm9ybWF0aW9uXCI7XG4gICAgTmV0d29yay5wbGF0Zm9ybXMgPSBbXCJBbWF6b24gRmlyZSBPU1wiLCBcIkFuZHJvaWRcIiwgXCJCcm93c2VyXCIsIFwiaU9TXCIsIFwiV2luZG93c1wiXTtcbiAgICBOZXR3b3JrLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogY29yZSQxLkluamVjdGFibGUgfVxuICAgIF07XG4gICAgcmV0dXJuIE5ldHdvcms7XG59KGNvcmUuSW9uaWNOYXRpdmVQbHVnaW4pKTtcblxuZXhwb3J0cy5OZXR3b3JrID0gTmV0d29yaztcbiJdfQ==